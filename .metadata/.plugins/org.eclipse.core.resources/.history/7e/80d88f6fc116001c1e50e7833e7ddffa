package com.microservices.movie_catalog_service.controllers;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.microservices.movie_catalog_service.models.CatalogItem;
import com.microservices.movie_catalog_service.models.Movie;
import com.microservices.movie_catalog_service.models.Rating;
import com.microservices.movie_catalog_service.models.UserRating;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@RestController
@RequestMapping("/api/moviecatalog")
public class CatalogResourceController {
	
	 @Autowired
	 private RestTemplate restTemplate;
	 
	 @GetMapping("/{userId}")
	 //@HystrixCommand(fallbackMethod="getFallbackCatalog")
	 public List<CatalogItem> getCatalog(@PathVariable("userId") String userId,HttpServletRequest request) {
		 
		 //UserRating userRatings = restTemplate.getForObject("http://ratings-data-service/api/ratingsdata/user/"+userId, UserRating.class); 
		 HttpEntity<HttpHeaders> httpEntity= this.generateHeader(request);
		 ResponseEntity<UserRating> response = restTemplate.exchange("http://ratings-data-service/api/ratingsdata/user/"+userId,HttpMethod.GET, httpEntity,UserRating.class); 
		 UserRating userRatings = response.getBody();
		 return userRatings.getRatings().stream().map(rating ->{
			   Movie movie = restTemplate.getForObject("http://movie-info-service/api/movieinfo/"+rating.getMovieId(), Movie.class);
			   
			   return new CatalogItem(movie.getName(), movie.getDescription(), rating.getRating());
		 }).collect(Collectors.toList());
		 
	 }
	 
	 
	 private HttpEntity<HttpHeaders> generateHeader(HttpServletRequest request){
		 String token = request.getHeader("Authorization");
		 HttpHeaders headers = new HttpHeaders();
		 headers.setContentType(MediaType.APPLICATION_JSON);
		 headers.add("Authorization", token);
		 HttpEntity<HttpHeaders> req = new HttpEntity<HttpHeaders>(headers);
		return req;
	 }

}
